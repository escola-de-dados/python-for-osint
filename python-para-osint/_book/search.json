[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python para OSINT em 21 dias",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "pag2.html",
    "href": "pag2.html",
    "title": "3  Para quem é este livro",
    "section": "",
    "text": "Primeiramente este livro foi feito para meus seguidores no X (antigo Twitter), rede a qual eu posto conteúdo sobre OSINT (Open Source Intelligent). Também é direcionado a profissionais da área, pesquisadores e interessados em investigações em dados abertos.\nSe você usa ou planeja usar as ferramentas de código aberto escritas em Python, mas você não está satisfeito com as funcionalidades padrã e gostaria de modifica-las um pouco, este livro ajudará você a fazer isto rapidamente.\nEste livro ajudará também a automatizar várias tarefas de rotinas em investigações: processar dados de uma API, coletar dados de websites, criar relatórios e visualização de dados.\nO principal objetivo deste livro não é ensinar a você escrever código Python, mas te ensinar a gastar menos tempo nas tarefas de rotina em OSINT. Além disso, para os códigos de exemplo, também darei links para diferentes serviços que te ajudarão a resolver problemas diferentes.\nEste livro também pode ser útil para melhorar o nível técnico daqueles que não possuem conhecimento de Ciências da Computação e quer tentar usar Linux, aprender a usar linhas de comandos e entender termos de TI como “JSON”, “API”, “WHOIS” etc."
  },
  {
    "objectID": "pag3.html",
    "href": "pag3.html",
    "title": "4  Para quem não é este livro",
    "section": "",
    "text": "Para quem não conheçe OSINT ou prentende iniciar a partir daqui. A maior parte deste livro é direcionado a tópicos sobre investigação e coleta de dados.\nPara aqueles que querem aprender Python, sugiro procurar cursos e/ou tutoriais (existem alguns na Escola de Dados) e depois voltar aqui.\nEste livro não aborda muitas coisas importantes e algumas coisas talvez sejam até consideradas uma má prática. Existem coisas que não importam se escritas no contexto de automação de tarefas em OSINT, mas que podem ser extremamente importantes em grandes projetos."
  },
  {
    "objectID": "pag4.html",
    "href": "pag4.html",
    "title": "5  Como usar este livro",
    "section": "",
    "text": "A primeira coisa que aconselho fazer é folhear as páginas, dar uma olhada geral no conteúdo e decidir se este livro será útil para você.\nTomada esta decisão, estude o assunto de acordo com a sugestão de dia, durante 21 dias, pensando sempre em como você pode aplicar os aprendizados em suas investigações. Se acontecer de perder um dia, ou até uma semana, por favor não seja duro consigo mesmo e continue de onde parou.\nTambém sugiro que você execute todos os exemplos de códigos, que estão disponíveis neste repositório: https://github.com/cipher387/python-for-OSINT-21-days.\nEste livro é totalmente gratuíto. No início pensei em vender, mas como os assinantes da minha newsletter estão espalhados por todo o mundo e possuem diferentes níveis de renda, eu decidi disponibilizar sem restrições.\n\n\n\n\n\nMas para incentivar sua disciplina e te motivar a chegar até o fim, recomendo que faça uma doação. Infelizmente, pessoas que fazem cursos gratuítos nem sempre finalizam. Doando você me motivará a disponibilizar mais livros e/ou cursos sobre OSINT de graça.\nO valor da doação quem determina é você!\nAs doações podem ser feitas via cartão de crédito ou PayPal: https://boosty.to/cyb_detective.\nSe por alguma razão você não quiser/puder doar, ficarei muito feliz se estudares todo o livro."
  },
  {
    "objectID": "pag5.html#como-instalar-o-python",
    "href": "pag5.html#como-instalar-o-python",
    "title": "6  Preparando o ambiente de trabalho",
    "section": "6.1 Como instalar o Python",
    "text": "6.1 Como instalar o Python\nNão entrarei em detalhes de como fazer a instalação, por haver diferentes tipos de Sistema Operacional. Mas, deixarei aqui links que auxiliarão em cada um deles.\nLinks de instalação\n\nWindows: https://www.python.org/downloads/windows/\nMacOS: https://www.python.org/downloads/macos/\nLinux: https://www.python.org/downloads/source/\n\nInstruções de instalação para diferentes Sistemas Operacionais\nhttps://wiki.python.org/moin/BeginnersGuide/Download\nAplicativos para rodar scripts Python no smartphone\n\nTermux para Android: https://play.google.com/store/apps/details?id=com.termux&hl=en&pli=1 (Utilize as instruções Linux para instalar)\nPythonista para iOS: https://apps.apple.com/us/app/pythonista-3/id1085978097?ls=1"
  },
  {
    "objectID": "pag5.html#como-instalar-o-git",
    "href": "pag5.html#como-instalar-o-git",
    "title": "6  Preparando o ambiente de trabalho",
    "section": "6.2 Como instalar o Git",
    "text": "6.2 Como instalar o Git\nGit é um sistema de controle de versão. Ajuda você a examinar os problemas em seu código, permitindo voltar para quando “estava funcionando”, além de permitir organizar o trabalho colaborativo em grandes times (facilitando a identificação de quem quebrou ou ajustou algo).\nVocê usará Git na maior parte deste livro para copiar os exemplos de código que estão no GitHub e para instalar várias ferramentas OSINT.\nInstruções de instalação para Windows, Linux e MacOS: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"
  },
  {
    "objectID": "pag5.html#obrigatrio-fazer-este-curso-em-exatos-21-dias",
    "href": "pag5.html#obrigatrio-fazer-este-curso-em-exatos-21-dias",
    "title": "6  Preparando o ambiente de trabalho",
    "section": "6.3 � obrigat�rio fazer este curso em exatos 21 dias?",
    "text": "6.3 � obrigat�rio fazer este curso em exatos 21 dias?\nNão, mas também não recomendo fazer tão rápido, exceto se você esteja de férias e/ou tem muito tempo livre. Neste caso, tudo bem fazer 2-3 capítulos por dia (não mais que isto)."
  },
  {
    "objectID": "pag5.html#é-obrigatório-fazer-este-curso-em-exatos-21-dias",
    "href": "pag5.html#é-obrigatório-fazer-este-curso-em-exatos-21-dias",
    "title": "6  Preparando o ambiente de trabalho",
    "section": "6.3 É obrigatório fazer este curso em exatos 21 dias?",
    "text": "6.3 É obrigatório fazer este curso em exatos 21 dias?\nNão, mas também não recomendo fazer tão rápido, exceto se você esteja de férias e/ou tem muito tempo livre. Neste caso, tudo bem fazer 2-3 capítulos por dia (não mais que isto).\nSe você trabalha 8 horas ou mais por dia, você pode fazer um capítulo a cada dois ou três dias. Outra opção é fazer uma pausa de alguns dias nos estudos para permitir que você consiga assimilar bem o que está aprendendo. No entanto, não recomendo que você faça por mais de dois ou três meses.\nRecomendo que os capítulos sejam estudados na sequência proposta no livro."
  },
  {
    "objectID": "pag5.html#é-obrigatório-estudar-este-livro-em-exatos-21-dias",
    "href": "pag5.html#é-obrigatório-estudar-este-livro-em-exatos-21-dias",
    "title": "6  Preparando o ambiente de trabalho",
    "section": "6.3 É obrigatório estudar este livro em exatos 21 dias?",
    "text": "6.3 É obrigatório estudar este livro em exatos 21 dias?\nNão, mas também não recomendo fazer tão rápido, exceto se você esteja de férias e/ou tem muito tempo livre. Neste caso, tudo bem fazer 2-3 capítulos por dia (não mais que isto).\nSe você trabalha 8 horas ou mais por dia, você pode fazer um capítulo a cada dois ou três dias. Outra opção é fazer uma pausa de alguns dias nos estudos para permitir que você consiga assimilar bem o que está aprendendo. No entanto, não recomendo que você faça por mais de dois ou três meses.\nRecomendo que os capítulos sejam estudados na sequência proposta no livro.\nMas tudo bem você seguir suas próprias regras. Estudar em ordem aleatória poderá acontecer é erros de pacotes, como mostra a imagem abaixo.\n\n\n\n\n\nNo caso da imagem, para corrigir este problema, precisaria apenas instalar o pacote correto, usando pip.\nPor exemplo:\npip install numpy\n\n\n\n\n\nCom tudo pronto, agora vamos lá!"
  },
  {
    "objectID": "pag6.html",
    "href": "pag6.html",
    "title": "7  Dia 1 - Rode seu primeiro script",
    "section": "",
    "text": "Vamos começar copiando o repositório do GitHub para o seu computador, com os arquivos de exemplos utilizados neste livro.\nDigite na linha de comando:\ngit clone https://github.com/cipher387/python-for-OSINT-21-days\ncd python-for-OSINT-21-days\nSe aparecer uma mensagem pedindo seu nome de usuário e senha, coloque as credenciais de acesso a sua conta no GitHub.\n\nUm repositório GitHub é basicamente um armazenador de arquivos de dados, códigos e documentação. O que difere de serviços semelhantes de armazenamento são suas funcionalidades: histórico de versões, capacidade de criar issues (notas com indicação de erros ou perguntas), forks (uma cópia ramificada de repositório, sem influenciar no projeto original), entre outras.\n\nDigite na linha de comando:\npython Day_1/start.py\nO resultado deve ser algo parecido com a imagem abaixo.\n\n\n\n\n\nTente mudar o texto entre aspas e rode o script novamente.\nSe você não estiver utilizando uma ambiente de desenvolvimento online, deve está se perguntando “Qual o melhor ambiente de desenvolvimento para editar arquivos Python?”\nVocê pode utilizar o editor de texto que mais gostar. Minha recomendação é usar os mais populares: Visual Studio, Sublime Text, etc. Estes conseguem destacar automaticamente a sintaxe e sugerir nomes de variáveis e/ou funções (os códigos podem ser autocompletados).\nIsto é tudo por hoje!\nEste capítulo é mais curto que os outros para que as pessoas que não instalaram o Python ou que tiveram problemas na execução de qualquer script, consigam resolver.\nO que você deve fazer se encontrar algum erro?\nTenha certeza que instalou o Python corretamente:\npython --version\nTenha certeza que instalou o Git:\ngit --version\nSe o repositório python-for-OSINT-21-days não foi copiado, certifique-se de entrar com as credenciais corretas do GitHub.\nCaso aconteça algum erro ao rodar o script, tente deletar os arquivos e cloná-los novamente. Se nenhuma das alternativas anteriores resolver o seu problema, sugiro utilizar um ambiente de desenvolvimento online.\nEste livro utiliza o Gitpod. Se você também quiser utilizar, basta clicar neste link:\nhttps://gitpod.io#https://github.com/cipher387/python-for-OSINT-21-days\n\n\n\n\n\nCrie um novo workspace semelhante as configurações da imagem acima. Se necessário faça login com sua conta GitHub.\n\n\n\n\n\nQuando tudo estiver pronto, digite na linha de comando:\npython Day_1/start.py\nPor favor, não avance para o próximo capítulo até que tenha concluído com sucesso este capítulo, e ao rodar o script apareça a mensagem “Welcome to 21 dias Python course!”."
  },
  {
    "objectID": "pag7.html",
    "href": "pag7.html",
    "title": "8  O mínimo da sintaxe básica do Python",
    "section": "",
    "text": "Hoje vamos ver os quatro conceitos básicos da linguagem Python, que também pode ser encontrado nas linguagens de programação mais populares. Falarei delas a seguir da maneira mais simples possível.\nSe você já tiver estudado Python antes, poderá achar que eu perdi muita coisa importante na explicação. Porém quero relembrar que este livro não pretende tornar você um bom desenvolvedor Python, mas mostrar soluções simples e possíveis para automatizar rotinas de OSINT."
  },
  {
    "objectID": "pag7.html#variáveis",
    "href": "pag7.html#variáveis",
    "title": "8  Dia 2 - O mínimo da sintaxe básica do Python",
    "section": "8.1 Variáveis",
    "text": "8.1 Variáveis\nDe acordo com a definição clássica é “uma área nomeada na memória que é usada para acessar determinados dados”.\nVariáveis no Python podem armazenar:\n\nValores em texto - desde uma letra é um capítulo de livro. Este tipo de dado é declarado usando str().\nNúmeros inteiros - são declarados usando a função int();\nNúmeros float - são declarados usando a função int();\nTrue / False - são declarados usando a função bool().\n\nExistem outros tipos de dados, mas não veremos neste livro.\nEm algumas linguagens é necessário declarar o tipo de variável. Em Python não precisa fazer isso desnecessariamente (faremos algumas vezes neste livro). Por exemplo, quando quiser acrescentar um número a uma string/text ou combinar de alguma forma variáveis que são definidas por padrão como dados de tipos diferentes.\nVocê pode usar letras maiúsculas, minúsculas e o carácter underscore _ nos nomes das variáveis. Pode também utilizar números, desde que não inicie com eles.\nTente nomea-las com nomes que façam sentido, será mais fácil entender seu código no futuro.\nVamos praticar um pouco!\nRode o script variable.pyda pasta Day_2:\ncd Day_2\npython variable.py\n\n\n\n\n\nNote que rodamos o script Python diferente do primeiro capítulo. Da outra vez especificamos o caminho certo do arquivo. Desta vez abrimos primeiro a pasta Day_2 e então rodamos o arquivo variable.py. Os dois jeitos são aceitàveis, utilize o que achar melhor.\nComo resultado deve aparecer algo similar a imagem acima.\nDe agora em diante, vou explicar o script utilizando jogo da velha #. Você pode incluí-los no seu código. Todo texto que vem após o jogo da velha é ignorado pelo interpretador.\n\nRecomendo que primeiro você entenda o que o script está fazendo e só depois leia a explicação.\n\n# Atribui o valor John a variável first_name\nfirst_name = \"John\"\n# O valor da variável last_name é decidido pelo usuária. O uso da função input() possibilita isso. O \\n serve para quebrar uma linha, pode remover se quiser.\nlast_name = input('What is your last name?\\n')\n# A saída são valores que estão nas duas variáveis. Usamos a função print() para visualizar. O + serve para concatenar.\nprint(\"You are\" + \" \" + first_name + \" \" + last_name)\nNote que estamos usando aspas simples e duplas para strings. Os dois jeitos são aceitáveis no Python.\n\nA partir daqui vamos começar a usar funções. Uma função é um objeto que pede um valor como entrada e retorna como resposta uma ação ou um valor. input() e print() são funções embutidas em Python que pedem strings como argumento.\n\nEm algum momento deste livro você aprenderá a criar suas próprias funções."
  },
  {
    "objectID": "pag5.html#obrigatrio-estudar-este-livro-em-exatos-21-dias",
    "href": "pag5.html#obrigatrio-estudar-este-livro-em-exatos-21-dias",
    "title": "6  Preparando o ambiente de trabalho",
    "section": "6.3 � obrigat�rio estudar este livro em exatos 21 dias?",
    "text": "6.3 � obrigat�rio estudar este livro em exatos 21 dias?\nN�o, mas tamb�m n�o recomendo fazer t�o r�pido, exceto se voc� esteja de f�rias e/ou tem muito tempo livre. Neste caso, tudo bem fazer 2-3 cap�tulos por dia (n�o mais que isto).\nSe voc� trabalha 8 horas ou mais por dia, voc� pode fazer um cap�tulo a cada dois ou tr�s dias. Outra op��o � fazer uma pausa de alguns dias nos estudos para permitir que voc� consiga assimilar bem o que est� aprendendo. No entanto, n�o recomendo que voc� fa�a por mais de dois ou tr�s meses.\nRecomendo que os cap�tulos sejam estudados na sequ�ncia proposta no livro.\nMas tudo bem voc� seguir suas pr�prias regras. Estudar em ordem aleat�ria poder� acontecer � erros de pacotes, como mostra a imagem abaixo.\n\n\n\n\n\nNo caso da imagem, para corrigir este problema, precisaria apenas instalar o pacote correto, usando pip.\nPor exemplo:\npip install numpy\n\n\n\n\n\nCom tudo pronto, agora vamos l�!"
  },
  {
    "objectID": "pag7.html#estruturas-condicionais",
    "href": "pag7.html#estruturas-condicionais",
    "title": "8  Dia 2 - O mínimo da sintaxe básica do Python",
    "section": "8.2 Estruturas condicionais",
    "text": "8.2 Estruturas condicionais\nÉ uma construção sintática que permite efetuar uma ação a partir de uma condição estabelecida. Vamos ver um exemplo.\nRode condition.py:\n\n\n\n\n\n# Primeiro usamos a função input() para pedir a idade da usuária.\nage = input('How old are you?\\n')\n# Se ela entrar com um valor maior que 27, nós respondemos que ela está muito velha.\nif int(age) &gt; 27:\n  print(\"You are so old\")\n# Se for menor que 27, ela é muito nova.\nelif int(age) &lt; 27:\n  print(\"You are so young\")"
  },
  {
    "objectID": "pag7.html#listas",
    "href": "pag7.html#listas",
    "title": "8  Dia 2 - O mínimo da sintaxe básica do Python",
    "section": "8.3 Listas",
    "text": "8.3 Listas\nUma lista é um conjunto ordenado de itens, cada um com seu próprio índice, permitindo acesso rápido.\nRode list.py:\n\n\n\n\n\n# Criei uma lista de nomes.\ngirls = [\"Anna\", \"Maria\", \"Eva\"]\n# Mostrei os nomes usando a função print()\nprint(girls)\n# Adicionei um item usando a função embutida append()(por padrão novos elementos são adicionados ao final da lista).\ngirls.append(\"Brenda\")\n# Mostrei a lista atualizada\nprint(girls)\n# Mostrei o item 3 da lista (as listas começam a contar a partir do 0).\nprint (girls[3])\nNeste livro usaremos bastante as listas e aprenderemos mais função embutidas para trabalhar com elas.\nSe você já estudou outras linguagens de programação, provavelmente o conceito de arrays lhe é familiar. Python també tem este conceito. Os arrays em Python se difere das listas particularmente pelo fato de que em listas você usa dados de diferentes tipos (por exemplo, o primeiro elemento de uma lista pode ser uma string e o segundo um número), enquanto os arrays só podem ter um tipo de elemento.\nExistem outras diferenças que fazem a lista ser mais flexível e conveniente. Para a maioria das tarefas relacionadas a OSINT, é suficiente saber como usar listas, por isso não estudaremos arrays neste livro.\nListas podem ser multidimensionais, quando cada item da lista é também outra lista de 2, 3 ou mais itens. Este tipo será mencionado rapidamente neste livro."
  },
  {
    "objectID": "pag7.html#estrutura-de-repetição",
    "href": "pag7.html#estrutura-de-repetição",
    "title": "8  Dia 2 - O mínimo da sintaxe básica do Python",
    "section": "8.4 Estrutura de repetição",
    "text": "8.4 Estrutura de repetição\nEste tipo de estrutura permite que você repita um código algumas vezes, passando pelos elementos de um array, um por um.\nRode loop.py:\n\n\n\n\n\n# Criei uma lista de nomes.\ngirls = [\"Anna\", \"Maria\", \"Eva\"]\n# Mostrei um a um na tela, adicionando um ponto e vírgula.\nfor girl in girls:\n  print (girl +\"; \")\n# Mostrei na tela de 0 a 19 (lembrando que a contagem em Python começa com 0).\nfor x in range(20):\n  print(x)\n\nQuando usar estruturas de condição ou repetição, sempre atente a identação (espaços para organizar o código). Eles devem ser sempre quatro espaços antes do código “interno”.\n\nNa minha opinião, este é o mínimo de teoria que você precisa para escrever scripts Python. No próximo capítulo vamos aprender na prática os conhecimentos que serão úteis para OSINT."
  },
  {
    "objectID": "pag7.html#estrutura-condicionais",
    "href": "pag7.html#estrutura-condicionais",
    "title": "8  Dia 2 - O mínimo da sintaxe básica do Python",
    "section": "8.2 Estrutura condicionais",
    "text": "8.2 Estrutura condicionais\nÉ uma construção sintática que permite efetuar uma ação a partir de uma condição estabelecida. Vamos ver um exemplo.\nRode condition.py:\n\n\n\n\n\n# Primeiro usamos a função input() para pedir a idade da usuária.\nage = input('How old are you?\\n')\n# Se ela entrar com um valor maior que 27, nós respondemos que ela está muito velha.\nif int(age) &gt; 27:\n  print(\"You are so old\")\n# Se for menor que 27, ela é muito nova.\nelif int(age) &lt; 27:\n  print(\"You are so young\")"
  },
  {
    "objectID": "pag7.html#estrutura-condicional",
    "href": "pag7.html#estrutura-condicional",
    "title": "8  Dia 2 - O mínimo da sintaxe básica do Python",
    "section": "8.2 Estrutura condicional",
    "text": "8.2 Estrutura condicional\nÉ uma construção sintática que permite efetuar uma ação a partir de uma condição estabelecida. Vamos ver um exemplo.\nRode condition.py:\n\n\n\n\n\n# Primeiro usamos a função input() para pedir a idade da usuária.\nage = input('How old are you?\\n')\n# Se ela entrar com um valor maior que 27, nós respondemos que ela está muito velha.\nif int(age) &gt; 27:\n  print(\"You are so old\")\n# Se for menor que 27, ela é muito nova.\nelif int(age) &lt; 27:\n  print(\"You are so young\")"
  },
  {
    "objectID": "pag8.html",
    "href": "pag8.html",
    "title": "9  Dia 3 - Instalando e rodando o Python usando linha de comando",
    "section": "",
    "text": "Se você acompanha minha meus tweets, sabe que sempre posto ferramentas de OSINT usando linhas de comando. A maioria delas são construidas em Python, mas também tem em outras linguagens como JavaScript (Node.js), Go, Bash (Shell script) e Rust.\n\n\n\n\n\nNeste capítulo prenderemos como configurar e rodar Python deste jeito. Como exemplo, usaremos o Thorndyke e o Blackbird, duas ferramentas de pesquisa de usuários em redes sociais, através do nickname."
  },
  {
    "objectID": "pag8.html#º-maneira",
    "href": "pag8.html#º-maneira",
    "title": "9  Dia 3 - Instalando e rodando o Python usando linha de comando",
    "section": "9.1 1º maneira",
    "text": "9.1 1º maneira\nInstalando o gerenciador de pacotes PyPI (indexador de pacotes).\n\nO Python Package Index (PyPI) é um repositório de softwares Python, contendo mais de 300.000 mil pacotes. O usaremos em quase todos os capítudos deste livro.\n\nVamos começar com o Thorndyke https://github.com/rly0nheart/thorndyke, ferramenta muito simples para checar se o nickname de um usuário existem em várias redes sociais.\nBasta digitar na linha de comando:\npip install thorndyke\n\n\n\n\n\nPerfeito! Agora a ferramenta pode ser utilizada.\nDigite na linha de comando thorndyke seguido do nickname que você deseja procurar:\nthorndyke escoladedados"
  },
  {
    "objectID": "pag8.html#º-maneira-1",
    "href": "pag8.html#º-maneira-1",
    "title": "9  Dia 3 - Instalando e rodando o Python usando linha de comando",
    "section": "9.2 2º maneira",
    "text": "9.2 2º maneira\nInfelizmente, nem todos os desenvolvedores adicionam o seu projeto ao PyPI (apesar de ser muito fácil fazer isso). Por isso, algumas vezes teremos que copiar o projeto direto do GitHub, instalar os módulos relacionados e rodar a ferramenta referindo-se diretamente ao arquivo do código ao invés do nome do comando.\nAgora vamos instalar outra ferramenta para pesquisar nickname em redes sociais, o blackbird https://github.com/p1ngul1n0/blackbird.\nDigite na linha de comando:\ncd Day_3\ngit clone https://github.com/p1ngul1n0/blackbird\ncd blackbird\npip install -r requirements.txt\nO requirements.txt contém uma lista de pacotes necessárias para rodar a ferramenta. Lembrando que o comando cd é usado para navegar entre pastas."
  },
  {
    "objectID": "pag8.html#º-opção",
    "href": "pag8.html#º-opção",
    "title": "9  Dia 3 - Instalando e rodando Python usando linha de comando",
    "section": "9.1 1º opção",
    "text": "9.1 1º opção\nInstalando o gerenciador de pacotes PyPI (indexador de pacotes).\n\nO Python Package Index (PyPI) é um repositório de softwares Python, contendo mais de 300.000 mil pacotes. O usaremos em quase todos os capítudos deste livro.\n\nVamos começar com o Thorndyke (https://github.com/rly0nheart/thorndyke), ferramenta muito simples para checar se o nickname de um usuário existem em várias redes sociais.\nBasta digitar na linha de comando:\npip install thorndyke\n\n\n\n\n\nPerfeito! Agora a ferramenta pode ser utilizada.\nDigite na linha de comando thorndyke seguido do nickname que você deseja procurar:\nthorndyke escoladedados"
  },
  {
    "objectID": "pag8.html#º-opção-1",
    "href": "pag8.html#º-opção-1",
    "title": "9  Dia 3 - Instalando e rodando Python usando linha de comando",
    "section": "9.2 2º opção",
    "text": "9.2 2º opção\nInfelizmente, nem todos os desenvolvedores adicionam o seu projeto ao PyPI (apesar de ser muito fácil fazer isso). Por isso, algumas vezes teremos que copiar o projeto direto do GitHub, instalar os módulos relacionados e rodar a ferramenta referindo-se diretamente ao arquivo do código ao invés do nome do comando.\nAgora vamos instalar outra ferramenta para pesquisar nickname em redes sociais, o blackbird (https://github.com/p1ngul1n0/blackbird).\nDigite na linha de comando:\ncd Day_3\ngit clone https://github.com/p1ngul1n0/blackbird\ncd blackbird\npip install -r requirements.txt\nO requirements.txt contém uma lista de pacotes necessários para rodar a ferramenta. Lembrando que o comando cd é usado para navegar entre pastas.\n\n\n\n\n\nPara chegar se a instação foi um sucesso, rode este comando:\npython blackbird.py -u ivanov"
  },
  {
    "objectID": "pag8.html#º-opção-2",
    "href": "pag8.html#º-opção-2",
    "title": "9  Dia 3 - Instalando e rodando Python usando linha de comando",
    "section": "9.3 3º opção",
    "text": "9.3 3º opção\nTambém é possivel inicializar ferramentas diretamente no Python, usando o módulo Subprocess (https://docs.python.org/3/library/subprocess.html) que permite rodar diferentes diretrizes de linhas de comando no código Python.\nMova o arquivo launch.py da pasta Day_3 para pasta blackbird. Use o comando abaixo.\nmv launch.py blackbird\nAntes de rodar o comando, tenha certeza que a sua pasta atual é a Day_3.\n\n\n\n\n\nSe você estiver na pasta blackbird use o comando abaixo para voltar um diretório:\ncd..\nRode launch.py:\n\n\n\n\n\n# Importei o módulo Subprocess.\nimport subprocess\n# E rodei blackbird.py.\nsubprocess.call(\"python blackbird.py -u ivanov\", shell=True)\nDeste jeito é possivel rodar não apenas scripts Python, mas também scripts criados em outras linguagens de programação.\nA coisa mais importante que deve ser lembrada neste livro é que Blackbird e Thorndyke não são as melhores soluções de pesquisa em nickname. Shelock (https://github.com/sherlock-project/sherlock) e Maigret (https://github.com/soxoj/maigret) verificam em mais sites. Tente instalar e roda-los."
  },
  {
    "objectID": "pag9.html#escrevendo-arquivos",
    "href": "pag9.html#escrevendo-arquivos",
    "title": "10  Dia 4 - Lendo e escrevendo arquivos",
    "section": "10.1 Escrevendo arquivos",
    "text": "10.1 Escrevendo arquivos\nRode write_text.py:\n\n\n\n\n\n# Cria uma variável e atribui um texto\nresult = \"Results text\"\n# Abre (e ao mesmo tempo cria) o arquivo results.txt\nresults_file = open(\"results.txt\", \"a\")\n# Escreve o valor da variável result no arquivo result_file\nresults_file.write(result) \n# Fecha o arquivo\nresults_file.close()\n\nNote que a função open() tem dois argumentos. O primeiro é o nome do &gt;arquivo e o segundo é o que chamamos de “tipos de abertura”.\nExemplos de tipos de abertura:\n“r” - abre um arquivo para leitura;\n“a” - abre um arquivo para adicionar itens (cria o arquivo se não existir);\n“w” - abre um arquivo para escrever (cria o arquivo se não existir);\n“x” - cria um novo arquivo.\n\nLembre-se que em algumas situações não é necessário fazer um código complexo para escrever o resultado do script em um arquivo, porque o jeio mais fácil para escrever os resultados de um script Python em um arquivo basta simplesmente adicionar &gt; e o nome do arquivo a ser executado:\n\n\n\n\n\nAgora vamos tentar ler o texto do arquivo que criamos."
  },
  {
    "objectID": "pag9.html#lendo-arquivos",
    "href": "pag9.html#lendo-arquivos",
    "title": "10  Dia 4 - Lendo e escrevendo arquivos",
    "section": "10.2 Lendo arquivos",
    "text": "10.2 Lendo arquivos\nRode read_file.py:\n\n\n\n\n\n# Abre o arquivo results.txt\nresults_file = open(\"results.txt\", \"r\")\n# Mostra na tela o conteU+00FAdo dentro do arquivo results.txt\nprint(results_file.read())\nExiste outro jeito também. Com uma simples estrutura de repetição (loop), podemos ler as linhas de um arquivo, uma por vez, e executar uma ação em cada linha.\n\n\n\n\n\nPor favor, adicione algums conteúdos para o arquivo results.txt e rode read_lines_loop.py:\n\n\n\n\n\n# Cria uma variável com o número da linha\nstringNumber = 1\n# Abre o arquivo results.txt\nwith open(\"results.txt\") as f:\n# Vai através das linhas e mostra cada linha com o número da linha\nfor line in f:\n  print(str(stringNumber) + \". \" + line)\n# Adiciona mais um número por linha\nstringNumber += 1\nNote que usamos str() para converter uma variável do tipo integer para string. Sempre faça isso quando concatenar uma variável de texto e um número dentro de uma string.\nSe não quiser mostrar todas as linhas do arquivo, mas apenas as linhas com determinados números, você pode usar a função readlines, que converte as linhas dos arquivos em itens das listas.\nRode readlines.py:\n\n\n\n\n\n# Abre o arquivo results.txt\nf = open(\"results.txt\", \"r\")\n# Cria um array cujos elementos das linhas são as linhas do arquivo results.txt\nstringList=f.readlines()\n# Mostra na tela os elementos com o índice (a segunda linha do arquivo). Não esqueça que a contagem começa do zero.\nprint(stringList[1])\nSe por acaso precisar escrever os elementos de um array para uma arquivo, onde elemento serja escrito em uma linha separada, use o métodowritelines().\nArmazenar dados em arquivos nem sempre é uma boa prática (embora seja a opção mais fácil de aprender). Se você trabalha regularmente com arquivos que tem dezenas ou centenas de megabites, considere usar bases de dados. Veremos um pouco sobre isso no capítulo 8."
  },
  {
    "objectID": "pag10.html",
    "href": "pag10.html",
    "title": "11  Dia 5 - Manipulando requisições HTTP e trabalhando com APIs",
    "section": "",
    "text": "Quando você abre uma página web em seu navegador, é feita uma requisição ao servidor. Em resposta a isso, o servidor retorna o status, cabeçalhos e o corpo da resposta (código html da página, alguns dados em csv JSON ou XML, por exemplo).\n\n\n\n\n\nO jeito mais fácil de entender visualmente o que está acontecendo é abrir o site https://resttesttest.com/, colar o link de algum site e clicar no botão AJAX request.\nOSINT frequentemente precisa automatizar dados coletados de páginas web ou APIs (Application Programming Interface). O conhecimento básico necessário para fazer isso é escrever código que enviem requisições para servidores web e processe as respostas.\n\nAPIs (Application Programming Interface) é uma tecnologia que permite interação com uma aplicação que envia solicitação ao servidor. A API do GitHub permite recuperar dados de usuários, assim como fazer mudanças em repositórios, entre outras coisas, por exemplo.\n\nPara isto nós usaremos o pacote requests (https://pypi.org/project/requests/).\n\n\n\n\n\nInstale o pacote requests:\npip install requests\nRode o arquivo api_request.py:\n\n\n\n\n\n# Adiciona o pacote requests para o arquivo de script usando o comando import\nimport requests\n# Faz uma requisição\nresponse = requests.get(\"https://api.github.com/search/users?q=javascript\")\n# Mostra o resultado na tela em formato JSON\nprint(response.json())\nHá um enorme número de APIs, entre pagos e e gratuítos que fornece dados úteis para OSINT. Por exemplo, informações sobre:\n\nNúmeros de telefone, endereços e ceps;\nEmpresas;\nDomínios e endereços IP;\nCarteiras e transações criptografadas;\nUsuários de diferentes redes sociais.\n\nUma lista de mais de 100 APIs OSINT úteis pode ser encontrada neste repositório do GitHub: https://github.com/cipher387/API-s-for-OSINT\n\n\n\n\n\nNão é necessário escrever um script Python separado para testar APIs diferentes. É melhor usar um serviço online que consiga simular diferentes tipos de requisição e método de autorização, como o https://reqbin.com/ e o https://www.postman.com/.\n\n\n\n\n\nVoltaremos a este tópico de requisições na rede quando falarmos sobre arquivos JSON, raspagem e uso de servidores proxy. Iremos aprender como adicionar cabeçalhos para consulta e extração de dados dos textos de respostas."
  },
  {
    "objectID": "pag11.html#lendo-um-campo",
    "href": "pag11.html#lendo-um-campo",
    "title": "12  Dia 6 - JSON",
    "section": "12.1 Lendo um campo",
    "text": "12.1 Lendo um campo\nRode read_one_field.py:\n\n\n\n\n\n# Importa o módulo json e o requests\nimport json\nimport requests\n# Faz a mesma requisição para a API GitHub, feita no capítulo anterior\nresponse = requests.get(\"https://api.github.com/search/users?q=javascript\")\n# Atribui o variável o valor de resposta da consulta em formato json\nJson_data = response.json()\n# Mostra como saída o número de resultados\nprint (json_data['total_count'])\n# Mostra como saída o primeiro perfil do GitHub\nprint (json_data['items'][0]['html_url'])\nFrequentemente precisaremos extrair não apenas um valor, mas informações sobre listas de objetos inteiras. Por exemplo, os links de perfis de usuários do GitHub extraidos no exemplo acima."
  },
  {
    "objectID": "pag11.html#lendo-lista-com-muitos-campos",
    "href": "pag11.html#lendo-lista-com-muitos-campos",
    "title": "12  Dia 6 - JSON",
    "section": "12.2 Lendo lista com muitos campos",
    "text": "12.2 Lendo lista com muitos campos\nRode read_list_of_fields.py:\n\n\n\n\n\n# Importa o módulo json e o requests\nimport json\nimport requests\n# Faz a mesma requisição para a API GitHub\nresponse = requests.get(\"https://api.github.com/search/users?q=javascript\")\n# Pega o resulto em formato json\njson_data=response.json()\n# Conta o número de resultados\nusersCount = len(json_data['items'])-1\n# Mostra na tela um link para cada resultado em uma estrutura de repetição\nfor x in range(usersCount):\n print (json_data['items'][x]['html_url'])\n\n\n\n\n\nGeralmente é complicado entender como marcar o caminho certo do dado em estruturas de arquivos JSON. Alguns serviços podem ajudar a descobrir isso, tais como https://jsonpath.com/ e https://jsonpathfinder.com/.\nAntes de escrever algum código para processar arquivos JSON, lembre que algumas vezes é mais fácil converter para CSV e depois tirar as colunas que tem os dados que você precisa. Sugerimos este site para fazer isto: https://www.convertcsv.com/json-to-csv.htm."
  },
  {
    "objectID": "pag12.html#escrevendo-em-arquivo-csv",
    "href": "pag12.html#escrevendo-em-arquivo-csv",
    "title": "13  Dia 7 - CSV",
    "section": "13.1 Escrevendo em arquivo CSV",
    "text": "13.1 Escrevendo em arquivo CSV\nRode write_csv.py:\n\n\n\n\n\n# Importa o pacote CSV (está disponível por padrão)\nimport csv\n# Abre e cria o arquivo test.csv\ncsv_file = open('test.csv', 'w')\n# Cria um objeto write e armazena o conteúdo do csv_file\nwriter = csv.writer(csv_file, delimiter =';')\n# Cria uma lista com os cabeçalhos\nheader = ['Last name', 'First name', 'Age', 'Country']\n# Cria uma lista que preenche a primeira linha de cada campo\ndata = ['Smith', 'John', '35', 'USA']\n# Escreve os dados do cabeçalho no arquivo\nwriter.writerow(header)\n# Escreve os dados da linha no arquivo\nwriter.writerow(data)\n# Fecha o arquivo test.csv\ncsv_file.close()\nO arquivo CSV que criamos, quando aberto em qualquer editor de planilhas, deve se parecer mais ou menos com a imagem abaixo.\n\n\n\n\n\nAgora vamos tentar ler o conteúdo do arquivo CSV."
  },
  {
    "objectID": "pag12.html#lendo-arquivos-csv",
    "href": "pag12.html#lendo-arquivos-csv",
    "title": "13  Dia 7 - CSV",
    "section": "13.2 Lendo arquivos CSV",
    "text": "13.2 Lendo arquivos CSV\nRode read_csv.py\n\n\n\n\n\n# Importa o pacote CSV\nimport csv\n# Abre o arquivo test.csv\nwith open(\"test.csv\", 'r') as csv_file:\n# Cria o objeto csv.reader\ncsv_reader = csv.reader(csv_file)\n# Mostra na tela um a um\nfor row in csv_reader:\n print(row)\nAgora vamos tentar ler os dados de uma coluna separada.\nRode read_csv_one_column.py:\n\n\n\n\n\n# Importa o pacote CSV\nimport csv\n# Abre o arquivo test.csv\nwith open(\"test.csv\", 'r') as csv_file:\n# Cria o objeto csv reader\ncsv_reader = csv.reader(csv_file)\n# Um a um divide a string em colunas usando o delimitador ponto e vírgula (;)\nfor row in csv_reader:\n columns=row[0].split(\";\")\n# Mostra na tela a primeira coluna\nprint(columns[0])"
  },
  {
    "objectID": "pag12.html#json-para-csv",
    "href": "pag12.html#json-para-csv",
    "title": "13  Dia 7 - CSV",
    "section": "13.3 JSON para CSV",
    "text": "13.3 JSON para CSV\nAlgumas vezes precisaremos converter os dados de JSON para CSV para tornar possível ser aberto em editores de planilhas. Para isso podemos usar o site https://csvjson.com/ (a melhor solução na minha opinião).\nAgora mostrarei como fazer isso usando Python para reforçar seu aprendizado dos últimos dias.\nRode json_to_csv.py\n\n\n\n\n\n# Importa os pacotes JSON, CSV e requests\nimport json\nimport requests\nimport csv\n# Faz uma requisição para API do GitHub.\nresponse = requests.get(\"https://api.github.com/search/users?q=javascript\")\n# Pega os dados no formato JSON.\njson_data=response.json()\n# Cria e abre simuntâneamente o arquivo test.csv.\ncsv_file = open('test.csv', 'w')\n# Cria o objeto csv_writer.\nwriter = csv.writer(csv_file, delimiter =';')\n# Conta o número de usuários encontrados.\nusersCount = len(json_data['items'])-1\n# Passa por cada dado, linha a linha, no JSON. Cria um objeto string vazio e adiciona login, link do perfil, link do avatar e escreve a string no arquivo CSV.\nfor x in range(usersCount):\n row = []\n row.append(json_data['items'][x]['login'])\n row.append(json_data['items'][x]['html_url'])\n row.append(json_data['items'][x]['avatar_url'])\n writer.writerow(row)\n# Fecha o arquivo test.csv.\ncsv_file.close()\nO conteúdo do arquivo test.csv deve ficar semelhante ao arquivo csv_to_json.py depois de executado."
  }
]